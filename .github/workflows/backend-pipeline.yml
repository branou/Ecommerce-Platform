name: Ecommerce-backend CICD

on:
  push:
    branches:
      - main
    paths:
      - ecommerce-backend/**
      - 'docker-compose.yml'
      - .github/workflows/backend-pipeline.yml
  pull_request:
    branches:
      - main
    paths:
        - ecommerce-backend/**
        - 'docker-compose.yml'
        - .github/workflows/backend-pipeline.yml

jobs:
  compile:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
            distribution: 'temurin'
            java-version: '17'
      - name: Download Maven dependencies
        run: mvn dependency:go-offline
        working-directory: ./ecommerce-backend
      - name: compile with maven
        run: mvn compile
        working-directory: ./ecommerce-backend

  security-check:
    runs-on: ubuntu-latest
    needs: compile
    steps:
        - uses: actions/checkout@v4
        - name: Trivy Installation
          run: |
            sudo apt-get install -y wget apt-transport-https gnupg lsb-release
            wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
            echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
            sudo apt-get update -y
            sudo apt-get install -y trivy

        - name: Trivy FS Scan
          run: trivy fs --format table -o fs-report.json .

        - name: Gitleaks Installation
          run: sudo apt install gitleaks -y
        - name: Gitleaks Code Scan
          run: gitleaks detect source . -r gitleaks-report.json -f json

  build:
    runs-on: ubuntu-latest
    env:
      CLOUDINARY_CLOUD_NAME: ${{ secrets.MY_CLOUD }}
      CLOUDINARY_API_KEY: ${{ secrets.CLOUDINARY_API_KEY }}
      CLOUDINARY_API_SECRET: ${{ secrets.CLOUDINARY_API_SECRET }}
    needs: security-check
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
      - name: Build with maven
        run: mvn clean install -DskipTests
        working-directory: ./ecommerce-backend
      - name: Extract project version
        id: extract_version
        run: |
          mvn help:evaluate -Dexpression=project.version -q -DforceStdout > version.txt
          echo "VERSION=$(cat version.txt)" >> $GITHUB_ENV
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: ./ecommerce-backend
          file: ./ecommerce-backend/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/ecommerce-backend:${{ env.VERSION }}
            ${{ secrets.DOCKERHUB_USERNAME }}/ecommerce-backend:latest

  sonarqube:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
        with:
          # Disabling shallow clones is recommended for improving the relevancy of reporting
          fetch-depth: 0
      - name: Cache SonarQube packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Build and analyze
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          cd ecommerce-backend
          mvn -B verify -DskipTests org.sonarsource.scanner.maven:sonar-maven-plugin:sonar \
            -Dsonar.projectKey=branou_Ecommerce-Platform 
            
